{
  "name": "string-ext",
  "version": "1.0.1",
  "description": "Useful extensions for the String prototype",
  "main": "index.js",
  "scripts": {
    "test": "jasmine-node test/spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pford68/string-ext"
  },
  "keywords": [
    "string",
    "polyfill",
    "prototype"
  ],
  "author": {
    "name": "Philip Ford"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/pford68/string-ext/issues"
  },
  "homepage": "https://github.com/pford68/string-ext",
  "dependencies": {
    "underscore": "^1.8.2"
  },
  "readme": "# string-ext\nUseful extensions for the String prototype, for Node and Browserify.  Will not override methods natively supported by the browser.\n\n## API Documentation\n### endsWith(substr)\nPolyfill for String.prototype.endsWith().\n\n### startsWith(substr)\nPolyfill for String.prototype.startsWith().\n\n### capitalize()\nConverts only the first character to upper case.\n\n### uncapitalize()\nConverts only the first character to lower case.\n\n### trim()\n\n### trimLeft()\n\n### trimRight()\n\n### format(object)\nYet another templating function.  Sorry, but it was a great idea 10 years ago.  The associated String is a\ntemplate using either ${key} or {key} for placeholders.  Takes an object, key/value pairs, as input.  If a key\nmatches a key in a placeholder, the associated value replaces the placeholder.\n\n```javascript\nvar pattern = \"The {team} will win the {contest} in the {season} season.\";\nvar str = pattern.format({ team: 'Texas Rangers', contest: 'World Series', season: 2010});  \n// str equals \"The Texas Rangers will win the World Series in the 2010 season.\".\n\n```\n\n### toCamelCase()\nRequires spaces between intended syllables\n\n### contains(substr)\nReturns true/false for whether the specified string exists within the current string.\n\n### equalsIgnoreCase(str)\nCase insensitive string comparison.   Returns true/false for whether the associated string's \ncontent matches the specified string's content.\n\n### toBoolean()\n\n### isEmpty()\nReturns true if the associated String is empty or contains only whitespace. \n\n### notEmpty()\nReturns true if the associated String contains any characters other than whitespace.  Returns false for empty strings\nand strings containing only whitespace.\n\n### isUpperCase()\nReturns true/false for whether the associated String is upper case.\n\n### justify(spaces)\nAdds the specified number of spaces (padding) before the string\n\n### rightJustify(spaces)\nAdds the specified number of spaces (padding) after the string\n\n\n",
  "readmeFilename": "README.md",
  "_id": "string-ext@1.0.1",
  "_from": "string-ext@"
}
